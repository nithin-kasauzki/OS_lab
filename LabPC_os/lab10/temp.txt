1>
ff
#include<bits/stdc++.h>
using namespace std;

int main() {
    int partitions[] = {100, 450, 250, 300, 600};
    int n = sizeof(partitions) / sizeof(partitions[0]);
    int processes[] = {212, 317, 172, 426};
    int m = sizeof(processes) / sizeof(processes[0]);
    int allocation[m];

    memset(allocation, -1, sizeof(allocation));

    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            if(partitions[j] >= processes[i]) {
                allocation[i] = j;
                partitions[j] -= processes[i];
                break;
            }
        }
    }

    cout << "Process No.\tProcess Size\tPartition No.\n";
    for(int i = 0; i < m; i++) {
        cout << i+1 << "\t\t" << processes[i] << "\t\t";
        if(allocation[i] != -1) {
            cout << allocation[i]+1 << endl;
        }
        else {
            cout << "Not Allocated" << endl;
        }
    }
    return 0;
}
bf
#include<bits/stdc++.h>
using namespace std;

int main() {
    int partitions[] = {100, 450, 250, 300, 600};
    int n = sizeof(partitions) / sizeof(partitions[0]);
    int processes[] = {212, 317, 172, 426};
    int m = sizeof(processes) / sizeof(processes[0]);
    int allocation[m];

    memset(allocation, -1, sizeof(allocation));

    for(int i = 0; i < m; i++) {
        int bestIdx = -1;
        for(int j = 0; j < n; j++) {
            if(partitions[j] >= processes[i]) {
                if(bestIdx == -1 || partitions[j] < partitions[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
        if(bestIdx != -1) {
            allocation[i] = bestIdx;
            partitions[bestIdx] -= processes[i];
        }
    }

    cout << "Process No.\tProcess Size\tPartition No.\n";
    for(int i = 0; i < m; i++) {
        cout << i+1 << "\t\t" << processes[i] << "\t\t";


wt
#include<bits/stdc++.h>
using namespace std;

int main() {
    int partitions[] = {100, 450, 250, 300, 600};
    int n = sizeof(partitions) / sizeof(partitions[0]);
    int processes[] = {212, 317, 172, 426};
    int m = sizeof(processes) / sizeof(processes[0]);
    int allocation[m];

    memset(allocation, -1, sizeof(allocation));

    for(int i = 0; i < m; i++) {
        int worstIdx = -1;
        for(int j = 0; j < n; j++) {
            if(partitions[j] >= processes[i]) {
                if(worstIdx == -1 || partitions[j] > partitions[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if(worstIdx != -1) {
            allocation[i] = worstIdx;
            partitions[worstIdx] -= processes[i];
        }
    }

    cout << "Process No.\tProcess Size\tPartition No.\n";
    for(int i = 0; i < m; i++) {
        cout << i+1 << "\t\t" << processes[i] << "\t\t";
        if(allocation[i] != -1) {
            cout << allocation[i]+1 << endl;
        }
        else {
            cout << "Not Allocated" << endl;
        }
    }
    return 0;
}


4.
#include<iostream>
using namespace std;

class LinkedFileAllocation {
private:
    int num_blocks; // total number of blocks
    int* allocation_table; // an array to store the allocation status of each block
public:
    LinkedFileAllocation(int num_blocks) {
        this->num_blocks = num_blocks;
        allocation_table = new int[num_blocks];
        for(int i=0; i<num_blocks; i++) {
            allocation_table[i] = -1; // -1 means unallocated
        }
    }

    void allocate(int file_id, int num_blocks) {
        int block_index = find_first_unallocated(num_blocks);
        if(block_index == -1) {
            cout << "Error: Not enough free blocks available\n";
            return;
        }
        allocation_table[block_index] = file_id;
        for(int i=1; i<num_blocks; i++) {
            allocation_table[block_index+i] = -2; // -2 means allocated and part of a file
        }
        cout << "File allocated successfully\n";
    }

    void deallocate(int file_id) {
        for(int i=0; i<num_blocks; i++) {
            if(allocation_table[i] == file_id) {
                allocation_table[i] = -1;
            }
        }
        cout << "File deallocated successfully\n";
    }

    void display_allocation_table() {
        cout << "Allocation Table:\n";
        for(int i=0; i<num_blocks; i++) {
            if(allocation_table[i] == -1) {
                cout << "0 ";
            } else if(allocation_table[i] == -2) {
                cout << "- ";
            } else {
                cout << allocation_table[i] << " ";
            }
        }
        cout << "\n";
    }

private:
    int find_first_unallocated(int num_blocks) {
        int count = 0;
        for(int i=0; i<this->num_blocks; i++) {
            if(allocation_table[i] == -1) {
                count++;
            } else {
                count = 0;
            }
            if(count == num_blocks) {
                return i - num_blocks + 1;
            }
        }
        return -1;
    }
};

int main() {
    LinkedFileAllocation lfa(10); // 10 blocks available

    lfa.allocate(1, 3); // allocate 3 blocks for file 1
    lfa.display_allocation_table(); // should show: 1 1 1 - - - - - - -

    lfa.allocate(2, 2); // allocate 2 blocks for file 2
    lfa.display_allocation_table(); // should show: 1 1 1 2 2 - - - - -

    lfa.deallocate(1); // deallocate file 1
    lfa.display_allocation_table(); // should show: 0 0 0 2 2 - - - - -

    lfa.allocate(3, 4); // allocate 4 blocks for file 3
    lfa.display_allocation_table(); // should show: 0 0 0 2 2 3 3 3 3 3

    return 0;
}


3.
#include<iostream>
#include<string>
using namespace std;

class ContiguousFileAllocation {
private:
    int num_blocks; // total number of blocks
    int* allocation_table; // an array to store the allocation status of each block
public:
    ContiguousFileAllocation(int num_blocks) {
        this->num_blocks = num_blocks;
        allocation_table = new int[num_blocks];
        for(int i=0; i<num_blocks; i++) {
            allocation_table[i] = -1; // -1 means unallocated
        }
    }

    void allocate(string filename, int start, int length) {
        for(int i=start; i<start+length; i++) {
            if(allocation_table[i] != -1) {
                cout << "Error: Blocks are not contiguous\n";
                return;
            }
        }
        for(int i=start; i<start+length; i++) {
            allocation_table[i] = get_file_id(filename);
        }
        cout << "File " << filename << " allocated successfully\n";
    }

    void deallocate(string filename) {
        int file_id = get_file_id(filename);
        for(int i=0; i<num_blocks; i++) {
            if(allocation_table[i] == file_id) {
                allocation_table[i] = -1;
            }
        }
        cout << "File " << filename << " deallocated successfully\n";
    }

    void display_allocation_table() {
        cout << "Allocation Table:\n";
        for(int i=0; i<num_blocks; i++) {
            if(allocation_table[i] == -1) {
                cout << "0 ";
            } else {
                cout << allocation_table[i] << " ";
            }
        }
        cout << "\n";
    }

private:
    int get_file_id(string filename) {
        if(filename == "factorial") {
            return 1;
        } else if(filename == "calculate") {
            return 2;
        } else if(filename == "simple_interest") {
            return 3;
        }
        return 0; // invalid filename
    }
};

int main() {
    ContiguousFileAllocation cfa(20); // 20 blocks available

    cfa.allocate("factorial", 12, 6); // allocate 6 blocks for "factorial" starting at block 12
    cfa.display_allocation_table(); // should show: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0

    cfa.allocate("calculate", 5, 3); // allocate 3 blocks for "calculate" starting at block 5
    cfa.display_allocation_table(); // should show: 0 0 0 0 2 2 2 0 0 0 0 1 1 1 1 1 1 0 0 0

    cfa.allocate("simple_interest", 8, 12); // should fail because there are not enough contiguous blocks
    cfa.display_allocation_table(); // should show: 0 0 0 0 2 2 2 0 0 0 0 1 1 1 1 1 1 0 0 0

    cfa.deallocate("calculate"); // deallocate "calculate"
    cfa.display_allocation_table(); // should show: 0