
#include <stdio.h>
#include <stdlib.h>

int mutex = 1;

int full = 0;

int balance = 0;
int empty = 10, x = 0;
int wait(int s)
{
    return (--s);
}

int signal(int s)
{
    return (++s);
}

void producer(int amount)
{

    mutex = wait(mutex);
    full = signal(full);

    empty = wait(empty);
    balance += amount;
    x++;
    // printf("\n amount = %d",amount);

    printf("\nYour bank balance %d", balance);

    mutex = signal(mutex);
}

void consumer(int amount)
{

    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    balance -= amount;
    printf("\nYour bank balance %d", balance);

    x--;
    mutex = signal(mutex);
}

int main()
{
    int n, i, amount;
    printf("\n1. Press 1 for Deposit"
           "\n2. Press 2 for Withdraw"
           "\n3. Press 3 for Exit");

    // #pragma omp critical

    for (i = 1; i > 0; i++)
    {

        printf("\nEnter your choice:");
        scanf("%d", &n);

        switch (n)
        {
        case 1:

            if ((mutex == 1) && (empty != 0))
            {
                amount = 5000;
                producer(amount);
            }
            else
            {
                printf("Buffer is full!");
            }
            break;

        case 2:
            if ((mutex == 1) && (balance > 2000))
            {
                amount = 2000;
                consumer(amount);
            }

            else
            {
                printf("not possible!");
            }
            break;

        case 3:
            exit(0);
            break;
        }
    }
}


#include <stdio.h>
#include <stdlib.h>

int mutex = 1;

int full = 0;

int empty = 10, x = 0;

void producer()
{
    --mutex;

    ++full;

    --empty;

    x++;
    printf("\nProduced item %d", x);

    ++mutex;
}

void consumer()
{

    --mutex;

    --full;

    ++empty;
    printf("\nConsumed item %d", x);
    x--;

    ++mutex;
}

int main()
{
    int n, i;
    printf("\n1.Produce"
           "\n2.Consume"
           "\n3.Exit");

    for (i = 1; i > 0; i++)
    {

        printf("\nEnter your choice:");
        scanf("%d", &n);

        switch (n)
        {
        case 1:

            if ((mutex == 1) && (empty != 0))
            {
                producer();
            }

            else
            {
                printf("Buffer is full!");
            }
            break;

        case 2:

            if ((mutex == 1) && (full != 0))
            {
                consumer();
            }

            else
            {
                printf("Buffer is empty!");
            }
            break;

        case 3:
            exit(0);
            break;
        }
    }
}


#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
int main()
{

    key_t key = ftok("shmfile", 65);

    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    int *n = (int *)shmat(shmid, (void *)0, 0);

    int p = fork();
    if (p == 0)
    {

        int k;
        printf("enter n:");
        scanf("%d", &k);
        *n = k;
        // exit(0);
    }
    else if (p > 0)
    {
        wait(NULL);
        if (*n % 2 != 0)
            printf("\nnumber is %d odd\n", *n);
        else
            printf("\n number is %d even \n", *n);
    }
    shmdt(n);
    return 0;
}

#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

struct student
{
    int roll;
    int mark[5];
};

int main()
{

    key_t key = ftok("shmfile", 65);

    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    struct student *s1 = (struct student *)shmat(shmid, (void *)0, 0);

    int p = fork();
    if (p == 0)
    {
        // get data
        int temp;
        printf("roll:");
        scanf("%d", &temp);
        s1->roll = temp;
        for (int i = 0; i < 5; i++)
        {
            printf("\nmark %d:", i + 1);
            scanf("%d", &s1->mark[i]);
        }

        // exit(0);
    }
    else if (p > 0)
    {
        wait(NULL);
        float avg = 0;
        for (int i = 0; i < 5; i++)
        {
            avg += s1->mark[i];
        }
        printf("\n tOTAL %d, Average is %.2f\n", avg, avg / 5.0);
    }
    shmdt(s1);
    return 0;
}