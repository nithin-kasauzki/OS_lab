3.
#include <iostream>
#include <vector>

using namespace std;

const int NUM_RESOURCES = 3;
const int NUM_PROCESSES = 4;

int available[NUM_RESOURCES] = {15, 14, 12};

int max_req[NUM_PROCESSES][NUM_RESOURCES] = {{20, 17, 19},
                                             {13, 15, 13},
                                             {14, 15, 15},
                                             {16, 16, 16}};

int alloc[NUM_PROCESSES][NUM_RESOURCES] = {{0, 0, 0},
                                           {2, 0, 1},
                                           {3, 0, 3},
                                           {2, 1, 1}};

int need[NUM_PROCESSES][NUM_RESOURCES] = {{20, 17, 19},
                                          {11, 15, 12},
                                          {11, 15, 12},
                                          {14, 15, 15}};

bool isSafe()
{
    vector<int> work(available, available + NUM_RESOURCES);
    vector<bool> finish(NUM_PROCESSES, false);

    bool found;
    do
    {
        found = false;
        for (int i = 0; i < NUM_PROCESSES; i++)
        {
            if (!finish[i])
            {
                bool needs_met = true;
                for (int j = 0; j < NUM_RESOURCES; j++)
                {
                    if (need[i][j] > work[j])
                    {
                        needs_met = false;
                        break;
                    }
                }
                if (needs_met)
                {
                    found = true;
                    for (int j = 0; j < NUM_RESOURCES; j++)
                    {
                        work[j] += alloc[i][j];
                    }
                    finish[i] = true;
                }
            }
        }
    } while (found);

    for (int i = 0; i < NUM_PROCESSES; i++)
    {
        if (!finish[i])
        {
            return false;
        }
    }
    return true;
}

int main()
{
    if (isSafe())
    {
        cout << "System is safe." << endl;
    }
    else
    {
        cout << "System is not safe." << endl;
    }

    return 0;
}



1 gfg
// Banker's Algorithm
#include <stdio.h>
int main()
{
    // P0, P1, P2, P3, P4 are the Process names here

    int n, m, i, j, k;
    n = 5;                         // Number of processes
    m = 3;                         // Number of resources
    int alloc[5][3] = {{0, 1, 0},  // P0 // Allocation Matrix
                       {2, 0, 0},  // P1
                       {3, 0, 2},  // P2
                       {2, 1, 1},  // P3
                       {0, 0, 2}}; // P4

    int max[5][3] = {{7, 5, 3},  // P0 // MAX Matrix
                     {3, 2, 2},  // P1
                     {9, 0, 2},  // P2
                     {2, 2, 2},  // P3
                     {4, 3, 3}}; // P4

    int avail[3] = {3, 3, 2}; // Available Resources

    int f[n], ans[n], ind = 0;
    for (k = 0; k < n; k++)
    {
        f[k] = 0;
    }
    int need[n][m];
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }
    int y = 0;
    for (k = 0; k < 5; k++)
    {
        for (i = 0; i < n; i++)
        {
            if (f[i] == 0)
            {

                int flag = 0;
                for (j = 0; j < m; j++)
                {
                    if (need[i][j] > avail[j])
                    {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0)
                {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;

    for (int i = 0; i < n; i++)
    {
        if (f[i] == 0)
        {
            flag = 0;
            printf("The following system is not safe");
            break;
        }
    }

    if (flag == 1)
    {
        printf("Following is the SAFE Sequence\n");
        for (i = 0; i < n - 1; i++)
            printf(" P%d ->", ans[i]);
        printf(" P%d", ans[n - 1]);
    }

    return (0);

    // This code is contributed by Deep Baldha (CandyZack)
}


1.cgt

#include <iostream>
#include <vector>

using namespace std;

// Function to check if the system state is safe
bool isSafe(vector<vector<int>> &allocation, vector<vector<int>> &max_need, vector<int> &available)
{
    int n = allocation.size();
    vector<bool> finish(n, false);
    vector<int> work(available);

    // Step 1: Calculate the need matrix
    vector<vector<int>> need(n, vector<int>(4));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            need[i][j] = max_need[i][j] - allocation[i][j];
        }
    }

    // Step 2: Check if the system is in a safe state
    int count = 0;
    while (count < n)
    {
        bool found = false;
        for (int i = 0; i < n; i++)
        {
            if (!finish[i])
            {
                int j;
                for (j = 0; j < 4; j++)
                {
                    if (need[i][j] > work[j])
                    {
                        break;
                    }
                }
                if (j == 4)
                {
                    for (int k = 0; k < 4; k++)
                    {
                        work[k] += allocation[i][k];
                    }
                    finish[i] = true;
                    found = true;
                    count++;
                }
            }
        }
        if (!found)
        {
            return false;
        }
    }
    return true;
}

int main()
{
    // Example system state
    vector<vector<int>> allocation = {{1, 2, 2, 1}, {2, 0, 3, 3}, {1, 2, 1, 0}, {0, 0, 1, 1}, {0, 2, 1, 2}};
    vector<vector<int>> max_need = {{3, 3, 2, 2}, {3, 2, 3, 4}, {3, 3, 3, 4}, {2, 2, 2, 2}, {2, 3, 2, 4}};
    vector<int> available = {1, 0, 1, 0};

    if (isSafe(allocation, max_need, available))
    {
        cout << "The system is in a safe state." << endl;
    }
    else
    {
        cout << "The system is in an unsafe state." << endl;
    }

    return 0;
}